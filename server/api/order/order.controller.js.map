{"version":3,"sources":["api/order/order.controller.js"],"names":["myOrders","pubOrders","index","show","create","update","destroy","config","email","orderPlaced","res","statusCode","req","body","to","id","send","mailOptions","entity","status","json","orderUpdated","respondWithResult","console","log","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","find","user","orders","exec","catch","findById","params","uid","shortId","require","orderNo","generate","_id","__v"],"mappings":"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","file":"order.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/orders              ->  index\n * POST    /api/orders              ->  create\n * GET     /api/orders/:id          ->  show\n * PUT     /api/orders/:id          ->  update\n * DELETE  /api/orders/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Order from './order.model';\nimport * as config from '../../config/environment/shared'\nimport * as email from '../sendmail/send'\n\nfunction orderPlaced(res, statusCode) {\n  res.req.body.to = res.req.body.email;\n  res.req.body.id = 'Cash';\n  email.send(config.mailOptions.orderPlaced(res.req.body))\n\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction orderUpdated(res, statusCode) {\n  email.send(config.mailOptions.orderUpdated(res.req.body))\n\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction respondWithResult(res, statusCode) {\n  console.log(res);\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Get all orders by a user\nexport function myOrders(req, res) {\n  Order.find({email : req.user.email},function (err, orders) {\n    if(err) { return handleError(res, err); }\n    return res.status(200).json(orders);\n  });\n}\n\n\n// Get all orders for a publisher\nexport function pubOrders(req, res) {\n  Order.find({'items.publisheruid' : req.user.email},function (err, orders) {\n    if(err) { return handleError(res, err); }\n    return res.status(200).json(orders);\n  });\n}\n\n// Gets a list of Orders\nexport function index(req, res) {\n  return Order.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Order from the DB\nexport function show(req, res) {\n  return Order.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Order in the DB\nexport function create(req, res) {\n  req.body.uid = req.user.email; // id change on every user creation hence email is used\n  var shortId = require('shortid');\n  req.body.orderNo = shortId.generate();\n\n  // When order.status is null, the client will replace with the Array[0] of order status at Settings page\n  return Order.create(req.body)\n    .then(orderPlaced(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Order in the DB\nexport function update(req, res) {\n  \n  if(req.body._id) { delete req.body._id; }\n  if(req.body.__v) { delete req.body.__v; }\n  return Order.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(orderUpdated(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Order from the DB\nexport function destroy(req, res) {\n  return Order.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}